// Code generated by mockery v1.0.0. DO NOT EDIT.

package device

import (
	context "context"

	inovibe_api_v3 "bitbucket.org/ino-on/ino-vibe-api"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// CompleteInstall provides a mock function with given fields: _a0, _a1
func (_m *MockClient) CompleteInstall(_a0 context.Context, _a1 *inovibe_api_v3.CompleteInstallRequest) (*inovibe_api_v3.CompleteInstallResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.CompleteInstallResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.CompleteInstallRequest) *inovibe_api_v3.CompleteInstallResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.CompleteInstallResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.CompleteInstallRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Detail provides a mock function with given fields: _a0, _a1
func (_m *MockClient) Detail(_a0 context.Context, _a1 string) (*inovibe_api_v3.DeviceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.DeviceResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) *inovibe_api_v3.DeviceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.DeviceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Discard provides a mock function with given fields: _a0, _a1
func (_m *MockClient) Discard(_a0 context.Context, _a1 *inovibe_api_v3.DiscardRequest) (*inovibe_api_v3.DiscardResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.DiscardResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.DiscardRequest) *inovibe_api_v3.DiscardResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.DiscardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.DiscardRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0, _a1
func (_m *MockClient) List(_a0 context.Context, _a1 inovibe_api_v3.InstallStatus) (*inovibe_api_v3.DeviceListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.DeviceListResponse
	if rf, ok := ret.Get(0).(func(context.Context, inovibe_api_v3.InstallStatus) *inovibe_api_v3.DeviceListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.DeviceListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, inovibe_api_v3.InstallStatus) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareInstall provides a mock function with given fields: _a0, _a1
func (_m *MockClient) PrepareInstall(_a0 context.Context, _a1 *inovibe_api_v3.PrepareInstallRequest) (*inovibe_api_v3.PrepareInstallResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.PrepareInstallResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.PrepareInstallRequest) *inovibe_api_v3.PrepareInstallResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.PrepareInstallResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.PrepareInstallRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatusLog provides a mock function with given fields: _a0, _a1
func (_m *MockClient) StatusLog(_a0 context.Context, _a1 *inovibe_api_v3.StatusLogRequest) (*inovibe_api_v3.StatusLogResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.StatusLogResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.StatusLogRequest) *inovibe_api_v3.StatusLogResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.StatusLogResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.StatusLogRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreStatusLog provides a mock function with given fields: _a0, _a1
func (_m *MockClient) StoreStatusLog(_a0 context.Context, _a1 *inovibe_api_v3.AddStatusLogRequest) (*inovibe_api_v3.AddStatusLogResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.AddStatusLogResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.AddStatusLogRequest) *inovibe_api_v3.AddStatusLogResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.AddStatusLogResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.AddStatusLogRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uninstall provides a mock function with given fields: _a0, _a1
func (_m *MockClient) Uninstall(_a0 context.Context, _a1 *inovibe_api_v3.UninstallRequest) (*inovibe_api_v3.UninstallResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.UninstallResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.UninstallRequest) *inovibe_api_v3.UninstallResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.UninstallResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.UninstallRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Uninstalling provides a mock function with given fields: _a0, _a1
func (_m *MockClient) Uninstalling(_a0 context.Context, _a1 *inovibe_api_v3.UninstallingRequest) (*inovibe_api_v3.UninstallingResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.UninstallingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.UninstallingRequest) *inovibe_api_v3.UninstallingResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.UninstallingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.UninstallingRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfig provides a mock function with given fields: _a0, _a1
func (_m *MockClient) UpdateConfig(_a0 context.Context, _a1 *inovibe_api_v3.DeviceConfigUpdateRequest) (*inovibe_api_v3.DeviceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.DeviceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.DeviceConfigUpdateRequest) *inovibe_api_v3.DeviceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.DeviceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.DeviceConfigUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInfo provides a mock function with given fields: _a0, _a1
func (_m *MockClient) UpdateInfo(_a0 context.Context, _a1 *inovibe_api_v3.DeviceInfoUpdateRequest) (*inovibe_api_v3.DeviceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.DeviceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.DeviceInfoUpdateRequest) *inovibe_api_v3.DeviceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.DeviceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.DeviceInfoUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: _a0, _a1
func (_m *MockClient) UpdateStatus(_a0 context.Context, _a1 *inovibe_api_v3.DeviceStatusUpdateRequest) (*inovibe_api_v3.DeviceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.DeviceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.DeviceStatusUpdateRequest) *inovibe_api_v3.DeviceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.DeviceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.DeviceStatusUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitCompleteInstall provides a mock function with given fields: _a0, _a1
func (_m *MockClient) WaitCompleteInstall(_a0 context.Context, _a1 *inovibe_api_v3.WaitCompleteInstallRequest) (*inovibe_api_v3.WaitCompleteInstallResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *inovibe_api_v3.WaitCompleteInstallResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inovibe_api_v3.WaitCompleteInstallRequest) *inovibe_api_v3.WaitCompleteInstallResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inovibe_api_v3.WaitCompleteInstallResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inovibe_api_v3.WaitCompleteInstallRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
