// Code generated by mockery v1.0.0. DO NOT EDIT.

package group

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

// GetChildGroups provides a mock function with given fields: ctx, groupID
func (_m *MockReader) GetChildGroups(ctx context.Context, groupID string) ([]Group, error) {
	ret := _m.Called(ctx, groupID)

	var r0 []Group
	if rf, ok := ret.Get(0).(func(context.Context, string) []Group); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetID provides a mock function with given fields: ctx, groupName
func (_m *MockReader) GetID(ctx context.Context, groupName string) (string, error) {
	ret := _m.Called(ctx, groupName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, groupName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIDs provides a mock function with given fields: ctx, groupName
func (_m *MockReader) GetIDs(ctx context.Context, groupName []string) (string, error) {
	ret := _m.Called(ctx, groupName)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, []string) string); ok {
		r0 = rf(ctx, groupName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields: ctx, groupID
func (_m *MockReader) GetName(ctx context.Context, groupID string) (string, error) {
	ret := _m.Called(ctx, groupID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, groupID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParentUsers provides a mock function with given fields: ctx, groupID
func (_m *MockReader) GetParentUsers(ctx context.Context, groupID string) ([]string, error) {
	ret := _m.Called(ctx, groupID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
